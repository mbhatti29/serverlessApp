{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onUserChange","e","setState","user","target","value","onMessageChange","message","submitForm","preventDefault","state","data","axios","post","headers","then","res","console","log","catch","err","className","onSubmit","this","type","placeholder","name","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTA+EeA,G,kBAzEd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAORC,aAAe,SAACC,GACf,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SAVE,EAcpBC,gBAAkB,SAACL,GAClB,EAAKC,SAAS,CACbK,QAASN,EAAEG,OAAOC,SAhBA,EAoBpBG,WAAa,SAACP,GACZA,EAAEQ,iBADgB,MAEM,EAAKC,MAAtBP,EAFW,EAEXA,KAAMI,EAFK,EAELA,QAQTI,EAAO,CAAEJ,QAAQ,GAAD,OAAKJ,EAAL,aAAcI,IAEnCK,IAAMC,KACD,6EACAF,EAXc,CAChBG,QAAS,CACP,eAAgB,sBAYjBC,MAAK,SAAAC,GACLC,QAAQC,IAAI,mBAAoBF,MAEhCG,OAAM,SAAAC,GACNH,QAAQC,IAAI,gBAAiBE,OAvChC,EAAKV,MAAQ,CACXP,KAAM,GACNI,QAAS,IAJO,E,sEA4DlB,OACC,yBAAKc,UAAU,OACd,4CACA,0BAAMC,SAAUC,KAAKf,YAArB,SACO,2BAAOgB,KAAK,OAAOC,YAAY,OAAOC,KAAK,OAAOC,SAAUJ,KAAKvB,eADxE,YAEU,2BAAOwB,KAAK,OAAOC,YAAY,eAAeC,KAAK,UAAUC,SAAUJ,KAAKjB,kBACrF,4BAAQkB,KAAK,UAAb,c,GAnEaI,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.843b21fd.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\t\tuser: '',\n\t\t\t\tmessage: ''\n\t\t}\n\t}\n\nonUserChange = (e) => {\n\tthis.setState({\n\t\t\tuser: e.target.value,\n\t})\n}\n\nonMessageChange = (e) => {\n\tthis.setState({\n\t\tmessage: e.target.value\n\t})\n}\n\nsubmitForm = (e) => {\n  e.preventDefault();\n  const {user, message} = this.state;\n  let axiosConfig = {\n    headers: {\n      'Content-Type': 'application/json'\n      // \"Access-Control-Allow-Origin\": \"*\"\n    }\n  };\n\n  let data = { message: `${user}, ${message}` }\n\n\taxios.post(\n      'https://yaohrbj2gh.execute-api.us-east-1.amazonaws.com/default/appFunction', \n      data,\n      axiosConfig\n    )\n    .then(res => {\n    \tconsole.log(\"Axios Response: \", res)\n    })\n    .catch(err => {\n    \tconsole.log(\"Axios Error: \", err)\n    })\n\t// fetch('https://yaohrbj2gh.execute-api.us-east-1.amazonaws.com/default/appFunction', {\n\t// \tmethod: 'post',\n\t// \theader: {'Content-Type': 'application/json'},\n\t// \tbody: JSON.stringify({\n\t// \t\tmessage: `${user} - ${message}` \n\t\t\n\t// \t})\n\t// })\n\t// .then(res => res.json())\n\t// .then(res => console.log)\n\t// .catch(err => {\n\t// \tconsole.log(err)\n\t// })\n}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Send Message</h1>\n\t\t\t\t<form onSubmit={this.submitForm}>\n\t\t\t\t\tUser: <input type='text' placeholder=\"User\" name=\"user\" onChange={this.onUserChange}/>\n\t\t\t\t\tMessage: <input type='text' placeholder='message here' name=\"message\" onChange={this.onMessageChange}/>\n\t\t\t\t\t<button type=\"submit\">Send</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}